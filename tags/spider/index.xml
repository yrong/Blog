<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spider on yrong blog</title>
    <link>https://yrong.github.io/blog/tags/spider/</link>
    <description>Recent content in Spider on yrong blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>yrong@ustc.edu (Ronyang)</managingEditor>
    <webMaster>yrong@ustc.edu (Ronyang)</webMaster>
    <copyright>&amp;copy; Copyright 2017 Ronyang</copyright>
    <lastBuildDate>Wed, 07 Dec 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://yrong.github.io/blog/tags/spider/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Scrapy In-depth Analysis</title>
      <link>https://yrong.github.io/blog/2016/12/07/scrapy/</link>
      <pubDate>Wed, 07 Dec 2016 00:00:00 +0000</pubDate>
      <author>yrong@ustc.edu (Ronyang)</author>
      <guid>https://yrong.github.io/blog/2016/12/07/scrapy/</guid>
      <description>spider examples and patterns import scrapy class AuthorSpider(scrapy.Spider): name = &#39;author&#39; start_urls = [&#39;http://quotes.toscrape.com/&#39;] def parse(self, response): # follow links to author pages for href in response.css(&#39;.author+a::attr(href)&#39;).extract(): yield scrapy.Request(response.urljoin(href), callback=self.parse_author) # follow pagination links next_page = response.css(&#39;li.next a::attr(href)&#39;).extract_first() if next_page is not None: next_page = response.urljoin(next_page) yield scrapy.Request(next_page, callback=self.parse) def parse_author(self, response): def extract_with_css(query): return response.css(query).extract_first().strip() yield { &#39;name&#39;: extract_with_css(&#39;h3.author-title::text&#39;), &#39;birthdate&#39;: extract_with_css(&#39;.author-born-date::text&#39;), &#39;bio&#39;: extract_with_css(&#39;.author-description::text&#39;), } For spiders, the scraping cycle</description>
    </item>
    
  </channel>
</rss>