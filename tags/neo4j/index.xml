<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Neo4j on yrong blog</title>
    <link>https://yrong.github.io/blog/tags/neo4j/</link>
    <description>Recent content in Neo4j on yrong blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>yrong@ustc.edu (Ronyang)</managingEditor>
    <webMaster>yrong@ustc.edu (Ronyang)</webMaster>
    <copyright>&amp;copy; Copyright 2017 Ronyang</copyright>
    <lastBuildDate>Fri, 11 Nov 2016 15:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://yrong.github.io/blog/tags/neo4j/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Neo4j Cypher query</title>
      <link>https://yrong.github.io/blog/2016/11/11/neo4j-cypher/</link>
      <pubDate>Fri, 11 Nov 2016 15:00:00 +0000</pubDate>
      <author>yrong@ustc.edu (Ronyang)</author>
      <guid>https://yrong.github.io/blog/2016/11/11/neo4j-cypher/</guid>
      <description>filter element Delete specific element from array stackoverflow
MATCH (n) WHERE HAS(n.some_array) SET n.array = FILTER(x IN n.some_array WHERE x &amp;lt;&amp;gt; &amp;quot;oranges&amp;quot;);  split unrelated queries case
MATCH (a {cond:&#39;1&#39;}), (b {cond:&#39;x&#39;}) CREATE a-[:rel]-&amp;gt;b WITH 1 as dummy MATCH (a {cond:&#39;2&#39;}), (b {cond:&#39;y&#39;}) CREATE a-[:rel]-&amp;gt;b WITH 1 as dummy MATCH (a {cond:&#39;3&#39;}), (b {cond:&#39;z&#39;}) CREATE a-[:rel]-&amp;gt;b  aggregation  remember that anything which isn’t an aggregate function(count/collect/distinct/sum..)
is automaticlly used as part of the grouping key which means we could include more than</description>
    </item>
    
    <item>
      <title>用图数据库解决关系型数据库存在的问题</title>
      <link>https://yrong.github.io/blog/2016/10/19/neo4j-replace-rdbms/</link>
      <pubDate>Wed, 19 Oct 2016 15:00:00 +0000</pubDate>
      <author>yrong@ustc.edu (Ronyang)</author>
      <guid>https://yrong.github.io/blog/2016/10/19/neo4j-replace-rdbms/</guid>
      <description>User-Order-Product Rdbms which customers buying this product also bought that product
Graph  (p2:Product)&amp;lt;-[*]-(u:User) -[*]-&amp;gt;(p1:Product) return u  Friend of friend Rdbms  Alice’s friends-of-friends
 SELECT p1.Person AS PERSON, p2.Person AS FRIEND_OF_FRIEND FROM PersonFriend pf1 JOIN Person p1 ON pf1.PersonID = p1.ID JOIN PersonFriend pf2 ON pf2.PersonID = pf1.FriendID JOIN Person p2 ON pf2.FriendID = p2.ID WHERE p1.Person = &#39;Alice&#39; AND pf2.FriendID &amp;lt;&amp;gt; p1.ID  queries that extend to four, five, or six degrees of friendship deteriorate significantly due to the computational and space complexity of recursivelyjoining tables</description>
    </item>
    
    <item>
      <title>Neo4j Internal</title>
      <link>https://yrong.github.io/blog/2016/09/05/neo4j-internal/</link>
      <pubDate>Mon, 05 Sep 2016 15:00:00 +0000</pubDate>
      <author>yrong@ustc.edu (Ronyang)</author>
      <guid>https://yrong.github.io/blog/2016/09/05/neo4j-internal/</guid>
      <description>电子书 GraphDatabase 存储结构 现在让我们来看看数据在Neo4j中是如何存储的: .db是主存储文件,不同存储类型(node,relation,label,p</description>
    </item>
    
  </channel>
</rss>